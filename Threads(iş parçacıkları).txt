/* Threads: Paralel programlamaya imkan verir. örnegin  */

/********** threads olmayan örnek ***********/
#include <iostream>
#include <chrono>

usign namespace std;

void print()
{
     for(int i = 0; i < 5 ; i++)
     {
	count << i << endl;
	this thread::sleep_for(chrono::seconds(1));			// 1 sn uyut.
     }
}

int main ()
{
     print();

     for(int i = 100; i < 110 ; i++)
     {
	count << i << endl;
	this thread::sleep_for(chrono::miliseconds(1500));		// 1.5 sn uyut.
     }

 return 0;
}

// Yukarida ki örnekte threads kullanilmadigi için önce print() fonksiyonu çagrilir ve 5 sn orda o islem gerçeklestirir. Daha sonra main içinde ki for döngüsü yürütülür
// ve 15 sn de orda zaman harcar. Toplamda 25 sn harcamis olur.

/***************** threads kullanildiginda ********************/

#include <iostream>
#include <thread>
#include <chrono>

usign namespace std;

void print()
{
     for(int i = 0; i < 5 ; i++)
     {
	count << i << endl;
	this_thread::sleep_for(chrono::seconds(1));			// 1 sn uyut.
     }
}

int main ()
{
     threads t(print);

     for(int i = 100; i < 110 ; i++)
     {
	count << i << endl;
	this_thread::sleep_for(chrono::miliseconds(1500));		// 1.5 sn uyut.
     }

 return 0;
}

// Yuukarida ki örnekte thread kullanildiginda thread t() içinde ki fonksiyon ve altta ki for ayni anda yürütülür ve toplamda 15 sn harcanmis olur.

// NOT: Eger thread içinde ki kodlarin süresi for dan daha fazla olursa, for bittikten sonraa main fonksiyonun sonuna gelmis olur ve thread isini bitirmeden program
// sonlanmis olur. Bunu engellemek için ise for'dan sonra t.join(); yazilmasi gerek.
